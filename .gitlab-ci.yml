image: golang:1.10

variables:
  REPO_NAME: github.com/k-box/k-link-registry
  CONTAINER_RELEASE_IMAGE_BASE: $CI_REGISTRY/images/k-link-registry

# The problem is that to be able to use go get, one needs to put
# the repository in the $GOPATH. So for example if your gitlab domain
# is gitlab.com, and that your repository is namespace/project, and
# the default GOPATH being /go, then you'd need to have your
# repository in /go/src/gitlab.com/namespace/project
# Thus, making a symbolic link corrects this.
before_script:
  - export IMAGE_TAG="${CI_COMMIT_REF_NAME#v}_${CI_COMMIT_SHA:0:10}"
  - export CLEANED_CI_COMMIT_REF_NAME="${CI_COMMIT_REF_NAME#v}"
  - if [ "${CI_JOB_STAGE}" != "deploy" ]; then mkdir -p "$GOPATH"/src/"$REPO_NAME"; fi
  - if [ "${CI_JOB_STAGE}" != "deploy" ]; then ln -svf "$CI_PROJECT_DIR"/* "$GOPATH"/src/"$REPO_NAME"; fi
  - if [ "${CI_JOB_STAGE}" != "deploy" ]; then cd "$GOPATH"/src/"$REPO_NAME"; fi

stages:
  - test
  - build_frontend
  - build
  - release
  - deploy

format:
  stage: test
  tags:
    - docker
  script:
    # we use tags="dev" so there is no dependency on the prebuilt assets yet
    - go get -tags="dev" -v $(go list ./... | grep -v /vendor/) # get missing dependencies
    - go fmt $(go list ./... | grep -v /vendor/)
    - go vet -tags="dev" $(go list ./... | grep -v /vendor/)
    - go test -tags="dev" -race $(go list ./... | grep -v /vendor/) -v -coverprofile .testCoverage.txt
    # Use coverage parsing regex: ^coverage:\s(\d+(?:\.\d+)?%)

frontend:
  stage: build_frontend
  tags:
    - docker
  image: "node:8"
  cache:
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - node_modules/
  script:
    - cd $CI_PROJECT_DIR/ui
    - npm install
    - npm run production
  artifacts:
    expire_in: "8 hrs"
    paths:
      - ui/dist

compile:
  stage: build
  tags:
    - docker
  dependencies:
    - frontend
  script:
    # we use tags="dev" so there is no dependency on the prebuilt assets yet
    - go get -tags="dev" -v github.com/k-box/k-link-registry/klinkregistry # get missing dependencies

    # generate assets
    - go get github.com/shurcooL/vfsgen/cmd/vfsgendev
    - go generate github.com/k-box/k-link-registry/assets

    # dependencies for special platforms (windows)
    - go get github.com/inconshreveable/mousetrap

    # build binaries -- list of supported plattforms is here:
    # https://stackoverflow.com/a/20728862
    - GOOS=linux   GOARCH=amd64         go build -tags "netgo" -o $CI_PROJECT_DIR/klinkregistry.bin github.com/k-box/k-link-registry/klinkregistry
    - GOOS=windows GOARCH=amd64         go build -tags "netgo" -o $CI_PROJECT_DIR/klinkregistry.exe github.com/k-box/k-link-registry/klinkregistry
  artifacts:
    expire_in: "8 hrs"
    paths:
      - klinkregistry.bin
      - klinkregistry.arm
      - klinkregistry.exe

minify:
  stage: release
  tags:
    - docker
  dependencies:
    - compile
  image:
    name: znly/upx:latest
    entrypoint: ["/bin/sh", "-c"]
  script:
    - upx --best --brute $CI_PROJECT_DIR/klinkregistry/klinkregistry $CI_PROJECT_DIR/klinkregistry/klinkregistry.arm $CI_PROJECT_DIR/klinkregistry/klinkregistry.exe
  artifacts:
    paths:
      - klinkregistry.bin
      - klinkregistry.arm
      - klinkregistry.exe
  only:
    - tags


## Normal branch release, we create local images for being used during tests
branch_release:
  stage: release
  script:
    - echo $IMAGE_TAG
    - cd $CI_PROJECT_DIR
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker build -t $CI_REGISTRY_IMAGE:${IMAGE_TAG} .
    - docker push $CI_REGISTRY_IMAGE:${IMAGE_TAG}
    - docker rmi $CI_REGISTRY_IMAGE:${IMAGE_TAG}
  tags:
    - dind
  image: "docker:latest"
  services:
    - docker:dind
  except:
    - tags

## Tagged releases
tagged_release:
  stage: release
  script:
    - echo $IMAGE_TAG
    - cd $CI_PROJECT_DIR
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker build -t $CONTAINER_RELEASE_IMAGE_BASE:${CI_COMMIT_REF_NAME#v} .
    - docker login -u $REGISTRY_RELEASE_USERNAME -p $REGISTRY_RELEASE_PASSWORD $CI_REGISTRY
    - docker tag $CONTAINER_RELEASE_IMAGE_BASE:${CI_COMMIT_REF_NAME#v} "$CONTAINER_RELEASE_IMAGE_BASE:latest"
    - docker push "$CONTAINER_RELEASE_IMAGE_BASE:latest"
    - docker push "$CONTAINER_RELEASE_IMAGE_BASE:${CI_COMMIT_REF_NAME#v}"
    - docker rmi "$CONTAINER_RELEASE_IMAGE_BASE:${CI_COMMIT_REF_NAME#v}"
  tags:
    - dind
  image: "docker:latest"
  services:
    - docker:dind
  only:
    - tags



## Deploy on canary environments
.canary_deploy: &canary_deploy
  when: manual
  stage: deploy
  tags:
    - shell
    - deploy
  dependencies: []
  script:
    - DEPLOY_TAG=$([ -z "${CI_COMMIT_TAG}" ] && echo "${IMAGE_TAG}" || echo "${CLEANED_CI_COMMIT_REF_NAME}")
    - DEPLOY_REGISTRY=$([ -z "${CI_COMMIT_TAG}" ] && echo "${CI_REGISTRY_IMAGE}" || echo "${CONTAINER_RELEASE_IMAGE_BASE}")
    - echo "Deploying ${DEPLOY_REGISTRY} - ${DEPLOY_TAG}..."
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker pull $DEPLOY_REGISTRY:${DEPLOY_TAG}
    - cd $DEPLOY_FOLDER
    - docker tag $DEPLOY_REGISTRY:${DEPLOY_TAG} $DEPLOY_IMAGE
    - docker-compose down -v && docker-compose up -d

canary_juliet_deploy:
  <<: *canary_deploy
  environment: "Canary Juliet"
  variables:
    DEPLOY_FOLDER: $CANARY_J_FOLDER
    DEPLOY_IMAGE: $CANARY_J_IMAGE
